import asyncio
import logging
import re
from typing import Callable
from pathlib import Path

from aiogram import Router, types, Bot
from aiogram.filters.command import Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import ReactionTypeEmoji

from util.emoji import Emoji
from util.markdown import escape_markdown
from util.telegram.restrictions import owner_only_command, get_owner_ids
from globals import emotion_api, poetry_api, database

ABOUT_FILE = Path(__file__).parent.parent / "res" / "about.md"

router = Router()
bot: Bot = None


def set_bot(new_bot: Bot):
    global bot
    bot = new_bot


async def owner_only_permission_denied(message: types.Message):
    await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–∞.")


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("Hello!")


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    command_list = await bot.get_my_commands()
    command_list_formatted = '\n'.join(
        f'/{cmd.command}: {cmd.description}' for cmd in command_list
    )
    await message.answer(command_list_formatted)


@router.message(Command("about"))
async def cmd_about(message: types.Message):
    try:
        about_text = ABOUT_FILE.read_text(encoding="utf-8")
        await message.reply(text=about_text, parse_mode='Markdown', disable_web_page_preview=True)
    except FileNotFoundError:
        await message.reply("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


@router.message(Command("history"))
async def cmd_history(message: types.Message):
    try:
        user_id = message.from_user.id
        args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã

        # –ü–∞—Ä—Å–∏–º –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
        limit = 5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if args and args[0].isdigit():
            limit = min(int(args[0]), 20)  # –ú–∞–∫—Å–∏–º—É–º 20 –∑–∞–ø–∏—Å–µ–π

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        history = database.get_user_history(user_id=user_id, limit=limit)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = []
        if not history['emotions'] and not history['generations']:
            await message.answer("üì≠ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏
        if history['emotions']:
            response.append("*üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã —ç–º–æ—Ü–∏–π:*")
            for idx, emotion in enumerate(history['emotions'], 1):
                date = emotion.performed_at.strftime("%d.%m.%Y %H:%M")
                emotions = ", ".join(
                    escape_markdown(f"{k}: {v:.2f}") for k, v in emotion.emotions.items()
                )
                response.append(
                    f"{idx}\\. *{escape_markdown(date)}*\n"
                    f"–≠–º–æ—Ü–∏–∏: {escape_markdown(emotions)}"
                )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if history['generations']:
            response.append("\n*üñã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:*")
            for idx, gen in enumerate(history['generations'], 1):
                date = gen.performed_at.strftime("%d.%m.%Y %H:%M")
                response.append(
                    f"{idx}\\. *{escape_markdown(date)}*\n"
                    f"–ó–∞–ø—Ä–æ—Å: {escape_markdown(gen.request_text)}\n"
                    f"–û—Ç–≤–µ—Ç: {escape_markdown(gen.response_text)}"
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.reply(
            text="\n\n".join(response),
            parse_mode="MarkdownV2"
        )

    except Exception as e:
        logging.error(f"History error: {str(e)}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")


@router.message(Command("health"))
async def cmd_health(message: types.Message):
    sent_reply = await message.reply("ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    service_order = ['emotion', 'poetry', 'database']
    status = {name: "checking" for name in service_order}  # checking/success/error

    try:
        await message.react(reaction=[ReactionTypeEmoji(emoji=Emoji.THINK.emoji)])

        async def update_message():
            """–û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
            lines = []
            for name in service_order:
                if status[name] == "checking":
                    line = f"{Emoji.HOURGLASS.emoji} {name.capitalize()}: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è..."
                elif status[name] == "success":
                    line = f"{Emoji.CHECK_MARK.emoji} {name.capitalize()}: –†–∞–±–æ—Ç–∞–µ—Ç"
                else:
                    line = f"{Emoji.CROSSOUT.emoji} {name.capitalize()}: –û—à–∏–±–∫–∞"
                lines.append(line)

            await sent_reply.edit_text("\n".join(lines))

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        await update_message()

        async def check_service(name: str, checker: Callable):
            """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å"""
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                result = await asyncio.wait_for(
                    checker() if asyncio.iscoroutinefunction(checker)
                    else asyncio.to_thread(checker),
                    timeout=10
                )
                status[name] = "success" if result else "error"
            except Exception as e:
                status[name] = "error"
                logging.error(f"Health check failed for {name}: {str(e)}")
            finally:
                await update_message()  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        await asyncio.gather(*[
            check_service(name, service.check_health)
            for name, service in {
                'emotion': emotion_api,
                'poetry': poetry_api,
                'database': database
            }.items()
        ])

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
        final_emoji = Emoji.THUMBS_UP if all(v == "success" for v in status.values()) else Emoji.THUMBS_DOWN
        await message.react(reaction=[ReactionTypeEmoji(emoji=final_emoji.emoji)])

    except Exception as e:
        await sent_reply.edit_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await message.react(reaction=[ReactionTypeEmoji(emoji=Emoji.WARNING.emoji)])


@router.message(Command("user_data"))
async def cmd_user_data(message: types.Message):
    from random import random

    emotion_dict = {
        'happy': random(),
        'sad': random(),
        'anger': random(),
        'fear': random(),
        'surprise': random(),
        'disgust': random(),
    }

    emotion_to_emoji = {
        'happy': 'üòÅ',
        'sad': 'üò¢',
        'anger': 'üò°',
        'fear': 'üò±',
        'surprise': 'ü§Ø',
        'disgust': 'ü§Æ'
    }

    prevailing_emotion = max(emotion_dict, key=emotion_dict.get)

    try:
        await message.react(
            reaction=[ReactionTypeEmoji(emoji=emotion_to_emoji[prevailing_emotion])]
        )
    except TelegramBadRequest as e:
        pass

    await message.answer(
        f"You are {message.from_user}\n"
        f"Emotions: {emotion_dict}\n"
        f"Prevailing emotion: {emotion_to_emoji[prevailing_emotion]}{prevailing_emotion}"
    )


@router.message(Command("owners"))
@owner_only_command(default_action=owner_only_permission_denied)
async def cmd_owners(message: types.Message):
    owners_string = ("\\[" +
                     ", ".join([f"`{owner_id}`" for owner_id in get_owner_ids()]) +
                     "\\]")

    await message.reply(
        text=
            f"–í–ª–∞–¥–µ–ª—å—Ü—ã –±–æ—Ç–∞: {owners_string}\n" +
            f"–í—ã `{message.from_user.id}`",
        parse_mode='MarkdownV2'
    )
