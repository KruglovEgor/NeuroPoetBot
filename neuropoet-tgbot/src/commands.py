import asyncio
import json
import logging
import re
from typing import Callable
from pathlib import Path

from aiogram import Router, types, Bot
from aiogram.filters.command import Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import ReactionTypeEmoji

from api.emotion_api import EmotionAnalyzeRequestDto
from api.poetry_api import PoetryGenerationRequestDto
from util.emoji import Emoji
from util.markdown import escape_markdown
from util.telegram.restrictions import owner_only_command, get_owner_ids
from globals import get_global_state as gs

ABOUT_FILE = Path(__file__).parent.parent / "res" / "about.md"
additional_command_list = {
    'owners': '–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ ID –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞'
}

router = Router()
bot: Bot = None


def set_bot(new_bot: Bot):
    global bot
    bot = new_bot


async def owner_only_permission_denied(message: types.Message):
    await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–∞.")


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    database = await gs().get_database()
    database.add_user(user_id=message.from_user.id)
    await message.answer("Hello!")


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    command_list = await bot.get_my_commands()
    command_list_formatted = '\n'.join(
        f'/{cmd.command}: {cmd.description}' for cmd in command_list
    )
    if message.from_user.id in get_owner_ids():
        command_list_formatted += '\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:\n'
    command_list_formatted += '\n'.join(
        f'/{cmd[0]}: {cmd[1]}' for cmd in additional_command_list.items()
    )

    await message.answer(command_list_formatted)


@router.message(Command("about"))
async def cmd_about(message: types.Message):
    try:
        about_text = ABOUT_FILE.read_text(encoding="utf-8")
        await message.reply(text=about_text, parse_mode='Markdown', disable_web_page_preview=True)
    except FileNotFoundError:
        await message.reply("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


@router.message(Command("emotions"))
async def cmd_emotions(message: types.Message):
    try:
        # Extract command text
        command, *args = message.text.split(maxsplit=1)
        text = args[0] if args else ""

        if not text:
            await message.reply("‚ùå –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /emotions <—Ç–µ–∫—Å—Ç>")
            return

        # Get API instance from global state
        api = await gs().get_emotion_api()

        # Process request
        request = EmotionAnalyzeRequestDto(
            user_id=message.from_user.id,
            message=text
        )

        response = await api.analyze_emotions(request)

        print(response)

        if response:
            # Safe JSON formatting with markdown escaping
            emotions_json = escape_markdown(json.dumps(response.emotions, indent=2, ensure_ascii=False))

            database = await gs().get_database()
            database.log_emotion_analysis(user_id=message.from_user.id, emotions=response.emotions)

            await message.reply(
                f"üìä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏:\n```json\n{emotions_json}\n```",
                parse_mode='MarkdownV2'
            )
        else:
            await message.reply("‚ùå –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    except Exception as e:
        logging.error(f"Emotion analysis error: {str(e)}", exc_info=True)
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π")


@router.message(Command("generate"))
async def cmd_format(message: types.Message):
    try:
        # Extract command text
        command, *args = message.text.split(maxsplit=1)
        text = args[0] if args else ""

        if not text:
            await message.reply("‚ùå –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /generate <—Ç–µ–∫—Å—Ç>")
            return

        # Get API instance from global state
        emotion_api = await gs().get_emotion_api()
        poetry_api = await gs().get_poetry_api()
        database = await gs().get_database()

        # Process request
        emotion_request = EmotionAnalyzeRequestDto(
            user_id=message.from_user.id,
            message=text
        )
        emotion_response = await emotion_api.analyze_emotions(emotion_request)

        if not emotion_response:
            await message.reply("‚ùå –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        emotions = emotion_response.emotions
        database.log_emotion_analysis(user_id=message.from_user.id, emotions=emotions)

        poetry_request = PoetryGenerationRequestDto(
            user_id=message.from_user.id,
            emotions=emotions
        )
        poetry_response = await poetry_api.generate_poem(poetry_request)

        if not poetry_response:
            await message.reply("‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        poem = poetry_response.poem
        database.log_generation(
            user_id=message.from_user.id,
            request_text=text,
            response_text=poem
        )

        await message.reply(
            f"üìÉ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ*:\n{escape_markdown(poem)}",
            parse_mode='MarkdownV2'
        )

    except Exception as e:
        logging.error(f"Poem generation error: {str(e)}", exc_info=True)
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è")


@router.message(Command("history"))
async def cmd_history(message: types.Message):
    try:
        user_id = message.from_user.id
        args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã

        # –ü–∞—Ä—Å–∏–º –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
        limit = 5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if args and args[0].isdigit():
            limit = min(int(args[0]), 20)  # –ú–∞–∫—Å–∏–º—É–º 20 –∑–∞–ø–∏—Å–µ–π

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        history = (await gs().get_database()).get_user_history(user_id=user_id, limit=limit)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = []
        if not history['emotions'] and not history['generations']:
            await message.answer("üì≠ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏
        if history['emotions']:
            response.append("*üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã —ç–º–æ—Ü–∏–π:*")
            for idx, emotion in enumerate(history['emotions'], 1):
                date = emotion.performed_at.strftime("%d.%m.%Y %H:%M")
                print(emotion.emotions.items())
                top_emotion = max(emotion.emotions.items(), key=lambda x: x[1])
                top_emotion_str = f"{top_emotion[0]} ({top_emotion[1]})"
                response.append(
                    f"{idx}\\. *{escape_markdown(date)}*\n"
                    f"*–ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç —ç–º–æ—Ü–∏—è*: {escape_markdown(top_emotion_str)}"
                    # f"*–≠–º–æ—Ü–∏–∏*: ```json\n{json.dumps(emotion.emotions)}\n```"
                )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if history['generations']:
            response.append("\n*üñã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:*")
            for idx, gen in enumerate(history['generations'], 1):
                date = gen.performed_at.strftime("%d.%m.%Y %H:%M")
                response.append(
                    f"{idx}\\. *{escape_markdown(date)}*\n"
                    f"*–ó–∞–ø—Ä–æ—Å*: {escape_markdown(gen.request_text)}\n"
                    f"*–û—Ç–≤–µ—Ç*: {escape_markdown(gen.response_text)}"
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.reply(
            text="\n".join(response),
            parse_mode="MarkdownV2"
        )

    except Exception as e:
        logging.error(f"History error: {str(e)}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")

@router.message(Command("stats"))
async def cmd_stats(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        db = await gs().get_database()
        user_data = db.get_user_data(message.from_user.id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        join_date = user_data.registered_at.strftime("%d.%m.%Y %H:%M") if user_data else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –ü–æ–ª—É—á–∞–µ–º –∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏
        emotions = {}
        history = db.get_user_history(message.from_user.id)

        if history['emotions']:
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            counter = {}
            for record in history['emotions']:
                for emotion, score in record.emotions.items():
                    emotions[emotion] = emotions.get(emotion, 0) + score
                    counter[emotion] = counter.get(emotion, 0) + 1

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            emotions_avg = {
                emo: total / counter[emo]
                for emo, total in emotions.items()
            }
            emotions_text = "\n".join(
                f"{emo}: {val:.2f}"
                for emo, val in sorted(emotions_avg.items(), key=lambda x: -x[1])
            )
        else:
            emotions_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–º–æ—Ü–∏—è—Ö"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            f"üë§ *{escape_markdown(message.from_user.full_name)}* "
            f"\\(aka @{escape_markdown(message.from_user.username)}, `{message.from_user.id}`\\)\n"
            f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üïê –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {escape_markdown(join_date)}\n"
            f"üìà –°—Ä–µ–¥–Ω–∏–µ —ç–º–æ—Ü–∏–∏:\n{escape_markdown(emotions_text)}"
        )

        await message.reply(
            text=response,
            parse_mode="MarkdownV2",
            disable_web_page_preview=True
        )

    except Exception as e:
        logging.error(f"Stats error: {str(e)}", exc_info=True)
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

@router.message(Command("health"))
async def cmd_health(message: types.Message):
    sent_reply = await message.reply("ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    service_order = ['emotion', 'poetry', 'database']
    status = {name: "checking" for name in service_order}  # checking/success/error

    try:
        await message.react(reaction=[ReactionTypeEmoji(emoji=Emoji.THINK.emoji)])

        async def update_message():
            """–û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
            lines = []
            for name in service_order:
                if status[name] == "checking":
                    line = f"{Emoji.HOURGLASS.emoji} {name.capitalize()}: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è..."
                elif status[name] == "success":
                    line = f"{Emoji.CHECK_MARK.emoji} {name.capitalize()}: –†–∞–±–æ—Ç–∞–µ—Ç"
                else:
                    line = f"{Emoji.CROSSOUT.emoji} {name.capitalize()}: –û—à–∏–±–∫–∞"
                lines.append(line)

            await sent_reply.edit_text("\n".join(lines))

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        await update_message()

        async def check_service(name: str, checker: Callable):
            """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å"""
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                result = await asyncio.wait_for(
                    checker() if asyncio.iscoroutinefunction(checker)
                    else asyncio.to_thread(checker),
                    timeout=10
                )
                status[name] = "success" if result else "error"
            except Exception as e:
                status[name] = "error"
                logging.error(f"Health check failed for {name}: {str(e)}")
            finally:
                await update_message()  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        await asyncio.gather(*[
            check_service(name, service.check_health)
            for name, service in {
                'emotion': await gs().get_emotion_api(),
                'poetry': await gs().get_poetry_api(),
                'database': await gs().get_database()
            }.items()
        ])

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
        final_emoji = Emoji.THUMBS_UP if all(v == "success" for v in status.values()) else Emoji.THUMBS_DOWN
        await message.react(reaction=[ReactionTypeEmoji(emoji=final_emoji.emoji)])

    except Exception as e:
        await sent_reply.edit_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await message.react(reaction=[ReactionTypeEmoji(emoji=Emoji.WARNING.emoji)])


@router.message(Command("random_poem"))
async def cmd_random_poem(message: types.Message):
    try:
        database = await gs().get_database()
        poem = database.get_random_poem_fast()
        if poem is not None:
            await message.reply(f"*–°–ª—É—á–∞–π–Ω–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ*:\n{escape_markdown(poem)}", parse_mode="MarkdownV2")
        else:
            await message.reply("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è")


    except Exception as e:
        logging.error(f"Stats error: {str(e)}", exc_info=True)
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ")


@router.message(Command("owners"))
@owner_only_command(default_action=owner_only_permission_denied)
async def cmd_owners(message: types.Message):
    owners_string = ("\\[" +
                     ", ".join([f"`{owner_id}`" for owner_id in get_owner_ids()]) +
                     "\\]")

    await message.reply(
        text=
            f"–í–ª–∞–¥–µ–ª—å—Ü—ã –±–æ—Ç–∞: {owners_string}\n" +
            f"–í—ã `{message.from_user.id}`",
        parse_mode='MarkdownV2'
    )
